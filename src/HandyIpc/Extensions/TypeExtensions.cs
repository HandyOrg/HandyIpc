using System.Linq;
using System.Reflection;
using System.Security.Cryptography;
using System.Text;
using HandyIpc;

// ReSharper disable once CheckNamespace
namespace System
{
    internal static class TypeExtensions
    {
        public static Type GetAutoGeneratedClientType(this Type interfaceType)
        {
            return GetAutoGeneratedType(interfaceType, "Client");
        }

        public static Type GetAutoGeneratedServerType(this Type interfaceType)
        {
            return GetAutoGeneratedType(interfaceType, "Server");
        }

        private static Type GetAutoGeneratedType(Type interfaceType, string category)
        {
            string typeName;
            var prefix = "AutoGenerated" + category;

            if (interfaceType.IsNested)
            {
                var className = prefix + interfaceType.DeclaringType.Name + interfaceType.Name;
                typeName = interfaceType.AssemblyQualifiedName.Replace(
                    interfaceType.DeclaringType.FullName + "+" + interfaceType.Name,
                    interfaceType.Namespace + "." + className);
            }
            else
            {
                var className = prefix + interfaceType.Name;

                if (interfaceType.Namespace == null)
                {
                    className = $"{className}.{className}";
                }

                typeName = interfaceType.AssemblyQualifiedName.Replace(interfaceType.Name, className);
            }
            return Type.GetType(typeName) ??
                   throw new InvalidOperationException($"{interfaceType.Name} doesn't look like a Ipc interface. ");
        }

        public static string GetIdentifier(this Type interfaceType)
        {
            Guards.ThrowIfNot(interfaceType.IsInterface, "The type must be interface type.", nameof(interfaceType));

            using var sha256 = new SHA256CryptoServiceProvider();
            var buffer = Encoding.UTF8.GetBytes(interfaceType.AssemblyQualifiedName);
            var sha256Bytes = sha256.ComputeHash(buffer);
            return string.Concat(sha256Bytes.Select(item => item.ToString("X2")));
        }

        public static string GetAccessToken(this Type interfaceType)
        {
            Guards.ThrowIfNot(interfaceType.IsInterface, "The type must be interface type.", nameof(interfaceType));

            return interfaceType.GetCustomAttribute<IpcContractAttribute>(false).AccessToken;
        }
    }
}
