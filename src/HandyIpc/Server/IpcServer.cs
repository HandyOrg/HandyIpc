using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace HandyIpc.Server
{
    public class IpcServer
    {
        public static IpcServer Center { get; } = new IpcServer();

        private IpcServer() { }

        private readonly IDictionary<Type, Func<object>> _serverFactories = new Dictionary<Type, Func<object>>();
        private readonly IDictionary<Type, IIpcServerProxy> _ipcServerProxies = new Dictionary<Type, IIpcServerProxy>();

        private Action<IpcSettings> _configure;

        public IpcServer Configure(Action<IpcSettings> settings)
        {
            Guards.ThrowIfNull(settings, nameof(settings));

            var previous = _configure;
            _configure = s =>
            {
                previous?.Invoke(s);
                settings(s);
            };

            return this;
        }

        public IpcServer Register<TImpl>(Type interfaceType, Func<TImpl> factory) where TImpl : class
        {
            Guards.ThrowIfNot(interfaceType.IsAssignableFrom(typeof(TImpl)), "", nameof(factory));
            Guards.ThrowIfNot(!_serverFactories.ContainsKey(interfaceType), "", nameof(factory));

            _serverFactories[interfaceType] = factory;

            return this;
        }

        public void Start()
        {
            // Fix configure
            _configure?.Invoke(IpcSettings.Instance);

            // Fix middleware
            var defaultMiddleware = Middleware.Compose(
                Middleware.Heartbeat,
                Middleware.ExceptionHandler,
                Middleware.RequestParser);

            foreach (var item in _serverFactories)
            {
                var interfaceType = item.Key;
                var factory = item.Value;
                var proxy = GetOrCreateIpcServerProxy(interfaceType, factory);

                var middleware = defaultMiddleware
                    .Compose(Middleware.GetAuthenticator(interfaceType.GetAccessToken()))
                    .Compose(proxy.Dispatch);

#pragma warning disable 4014
                RunServerAsync(interfaceType.GetIdentifier(), middleware);
#pragma warning restore 4014
            }
        }

        private static async Task RunServerAsync(string identifier, MiddlewareHandler middleware, CancellationToken token = default)
        {
            while (!token.IsCancellationRequested)
            {
                try
                {
                    var stream = await PrimitiveMethods.CreateServerStreamAsync(identifier, token);
#pragma warning disable 4014
                    PrimitiveMethods.HandleRequestAsync(stream, middleware.ToHandler(), token);
#pragma warning restore 4014
                }
                catch
                {
                    IpcSettings.Instance.Logger.Error("");
                }
            }
        }

        private IIpcServerProxy GetOrCreateIpcServerProxy(Type interfaceType, Func<object> factory)
        {
            if (!_ipcServerProxies.ContainsKey(interfaceType))
            {
                var instance = factory();
                _ipcServerProxies[interfaceType] = (IIpcServerProxy)Activator.CreateInstance(
                    interfaceType.GetAutoGeneratedServerType(), instance);
            }

            return _ipcServerProxies[interfaceType];
        }
    }
}
