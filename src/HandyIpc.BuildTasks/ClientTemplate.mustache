//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by HandyIpc.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using HandyIpc;
using HandyIpc.Client;

{{#ClassList}}

namespace {{Namespace}}
{
{{#UsingList}}
using {{.}};
{{/UsingList}}

    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [global::System.Reflection.Obfuscation(Exclude = true)]
    public class HandyIpcClient{{GeneratedClassSuffix}}{{#TypeParameters}}<{{.}}>{{/TypeParameters}}
        : IpcClient, {{InterfaceName}}{{#TypeParameters}}<{{.}}>{{/TypeParameters}}
        {{ConstraintClauses}}
    {
        public HandyIpcClient{{GeneratedClassSuffix}}(string identifier, string accessToken) 
            : base(identifier, accessToken)
        {
        }
{{#MethodList}}

        {{#IsAwaitable}}async {{/IsAwaitable}}{{ReturnType}} {{InterfaceName}}{{#TypeParameters}}<{{.}}>{{/TypeParameters}}.{{Name}}{{#MethodTypeParameters}}<{{.}}>{{/MethodTypeParameters}}({{TypeAndParameters}}) {{MethodConstraintClauses}}
        {
            {{#IsAwaitable}}
            var response = await RemoteMethod.InvokeAsync<{{^IsVoid}}{{TaskReturnType}}{{/IsVoid}}{{#IsVoid}}byte[]{{/IsVoid}}>(
            {{/IsAwaitable}}
            {{^IsAwaitable}}
            var response = RemoteMethod.Invoke<{{^IsVoid}}{{ReturnType}}{{/IsVoid}}{{#IsVoid}}byte[]{{/IsVoid}}>(
            {{/IsAwaitable}}
                Identifier,
                new Request
                {
                    AccessToken = AccessToken,
                    MethodName = "{{Name}}{{#MethodTypeParameters}}<{{.}}>{{/MethodTypeParameters}}({{ParameterTypes}})",
                    {{#Parameters}}
                    Arguments = new object[] { {{.}} },
                    {{/Parameters}}
                    {{#TypeArguments}}
                    GenericArguments = new [] { {{.}} },
                    {{/TypeArguments}}
                    {{#MethodTypeArguments}}
                    MethodGenericArguments = new [] { {{.}} },
                    {{/MethodTypeArguments}}
                });

            {{#IsVoid}}
            if (response.IsUnit())
            {
                throw new InvalidOperationException();
            }
            {{/IsVoid}}
            {{^IsVoid}}
            return response;
            {{/IsVoid}}
        }
{{/MethodList}}
    }
}
{{/ClassList}}