//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by HandyIpc.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using HandyIpc;
using HandyIpc.Server;

{{#ClassList}}
namespace {{Namespace}}
{
    {{#UsingList}}
    using {{.}};
    {{/UsingList}}

    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [global::System.Reflection.Obfuscation(Exclude = true)]
    public class HandyIpcDispatcher{{GeneratedClassSuffix}}{{#TypeParameters}}<{{.}}>{{/TypeParameters}} : IIpcDispatcher
        {{ConstraintClauses}}
    {
        private readonly {{InterfaceName}}{{#TypeParameters}}<{{.}}>{{/TypeParameters}} _instance;
{{#HasGenericMethod}}
        private readonly Lazy<IReadOnlyDictionary<string, MethodInfo>> _genericMethodMapping;
{{/HasGenericMethod}}

        public HandyIpcDispatcher{{GeneratedClassSuffix}}({{InterfaceName}}{{#TypeParameters}}<{{.}}>{{/TypeParameters}} instance)
        {
            _instance = instance;
{{#HasGenericMethod}}
            _genericMethodMapping = new Lazy<IReadOnlyDictionary<string, MethodInfo>>(
                () => _instance.GetGenericMethodMapping(typeof({{InterfaceName}}{{#TypeParameters}}<{{.}}>{{/TypeParameters}})));
{{/HasGenericMethod}}
        }

        public async Task Dispatch(Context context, Func<Task> next)
        {
            var request = context.Get<Request>();

            object result;
            switch (request.MethodName)
            {
{{#MethodList}}
                {{#MethodTypeParameters}}
                case "{{Name}}<{{.}}>({{ParameterTypes}})"
                when (_genericMethodMapping.Value.TryGetValue("{{Name}}<{{.}}>({{ParameterTypes}})", out var methodInfo)):
                {
                    var args = context.Serializer.DeserializeArguments(context.Input, request.ArgumentTypes);
                    var constructedMethodInfo = methodInfo.MakeGenericMethod(request.MethodGenericArguments);
                    var obj = constructedMethodInfo.Invoke(_instance, args);
                    {{#IsVoid}}
                    {{#IsAwaitable}}await (Task)obj;{{/IsAwaitable}}
                    result = Signals.Unit;
                    {{/IsVoid}}
                    {{^IsVoid}}
                    {{#TaskReturnTypeContainsGenericParameter}}
                    result = await constructedMethodInfo.ReturnType.UnpackTask(obj);
                    {{/TaskReturnTypeContainsGenericParameter}}
                    {{^TaskReturnTypeContainsGenericParameter}}
                    result = {{#IsAwaitable}}await ({{ReturnType}}){{/IsAwaitable}}obj;
                    {{/TaskReturnTypeContainsGenericParameter}}
                    {{/IsVoid}}
                    break;
                }
                {{/MethodTypeParameters}}
                {{^MethodTypeParameters}}
                case "{{Name}}({{ParameterTypes}})":
                {
                    var args = context.Serializer.DeserializeArguments(context.Input, new Type[] { {{MethodParameterTypes}} });
                    {{#IsVoid}}
                    {{#IsAwaitable}}await {{/IsAwaitable}}_instance.{{Name}}({{Arguments}});
                    result = Signals.Unit;
                    {{/IsVoid}}
                    {{^IsVoid}}
                    result = {{#IsAwaitable}}await {{/IsAwaitable}}_instance.{{Name}}({{Arguments}});
                    {{/IsVoid}}
                    break;
                }
                {{/MethodTypeParameters}}
{{/MethodList}}
                default:
                    throw new ArgumentOutOfRangeException("No matching remote method was found.");
            }

            context.Output = context.Serializer.SerializeResponse(new Response { Value = result });

            await next();
        }
    }
}

{{/ClassList}}
